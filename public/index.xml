<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自由.自在</title>
    <link>/</link>
    <description>Recent content on 自由.自在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 25 May 2020 11:38:57 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于我</title>
      <link>/about/</link>
      <pubDate>Mon, 25 May 2020 11:38:57 +0800</pubDate>
      
      <guid>/about/</guid>
      <description>杨修
毕业于井冈山大学
从事后端开发工作 2016年&amp;ndash;至今</description>
    </item>
    
    <item>
      <title>300 Days Alone</title>
      <link>/2020/03/300-days-alone/</link>
      <pubDate>Sun, 08 Mar 2020 12:45:29 +0800</pubDate>
      
      <guid>/2020/03/300-days-alone/</guid>
      <description>it was only upon my arrival at the Geneva Airport that I realized it was over. Over there it was difficult physically but mostly psychologically and if I had to to do it again, Well I do not think I would.
In september 2008. I left Switzerland and it is comfort to spend 10 months alone in the archipelago of tonga in the middle of the Pacific Ocean to live, I brought with me a machete and my swiss knife I also had a medical kit, satellite phone, solar panel and battery to supply energy for my camera.</description>
    </item>
    
    <item>
      <title>[GO]web中间件(2)</title>
      <link>/2020/02/goweb%E4%B8%AD%E9%97%B4%E4%BB%B62/</link>
      <pubDate>Tue, 25 Feb 2020 11:48:49 +0800</pubDate>
      
      <guid>/2020/02/goweb%E4%B8%AD%E9%97%B4%E4%BB%B62/</guid>
      <description>&lt;p&gt;书接上文&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[GO]web中间件(1)</title>
      <link>/2020/02/goweb%E4%B8%AD%E9%97%B4%E4%BB%B61/</link>
      <pubDate>Tue, 25 Feb 2020 11:46:08 +0800</pubDate>
      
      <guid>/2020/02/goweb%E4%B8%AD%E9%97%B4%E4%BB%B61/</guid>
      <description>&lt;p&gt;web中间件常见的用途是一些公共方法的执行，譬如，获取用户的信息，压缩等。
在讲这些之前我们先实现一个go的web server。我们知道在go里面实现一个web服务器是相对容易的事情。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[GO]Context在golang数据库连接池中的实践</title>
      <link>/2020/02/gocontext%E5%9C%A8golang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 24 Feb 2020 14:56:50 +0800</pubDate>
      
      <guid>/2020/02/gocontext%E5%9C%A8golang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;我们都知道使用ctx可以控制goroutine，比如取消goroutine树，或者给ctx设置超时，以便整个ctx可以控制在预期的时间内执行，超时则不再继续执行，另外context也内置了deadline属性，开发者可以方便的控制自己的goroutine情况 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[GO] Context的golang实现</title>
      <link>/2020/02/go-context%E7%9A%84golang%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 21 Feb 2020 15:32:54 +0800</pubDate>
      
      <guid>/2020/02/go-context%E7%9A%84golang%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;context是golang里面的标准库，在go里面到处都可以找到使用ctx的例子，网上有很多context的科普文章
其中也有比较写的比较好的，这部分我会贴在文章末尾。今天我们主要是带着大家如何从0到1实现一个ctx，有了这种实践之后
具体在go源码中的使用场景分析，我会放在下一篇blog中，并且结合&lt;a href=&#34;http://www.youmakemeday.com/parse-implementation-of-golang-database-sql-connection/&#34;&gt;golang数据库连接池实现&lt;/a&gt;一起探究其中的奥秘，确保能一举深刻的理解ctx。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[GO]golang如何实现lru缓存</title>
      <link>/2020/02/gogolang%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%BC%93%E5%AD%98/</link>
      <pubDate>Wed, 19 Feb 2020 14:07:36 +0800</pubDate>
      
      <guid>/2020/02/gogolang%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;lru缓存，在当今依然非常热门的面试问题，笔者曾经面试【某蜓，音频领域的top公司】就问到了这个问题，当时回答的并不是好。那我们一起来看看如何从0-1实现一个完美的lru缓存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[GO]golang数据库连接池的实现</title>
      <link>/2020/02/gogolang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 17 Feb 2020 17:11:44 +0800</pubDate>
      
      <guid>/2020/02/gogolang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;Golang的database/sql包定义了常用的操作数据的方法，他提供了一个抽象，具体的driver依赖不同的数据库。
比如mysql驱动比较有名的&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; title=&#34;&#34;&gt;MySql&lt;/a&gt;。
还有Sql Server使用较为广泛的库是 &lt;a href=&#34;https://github.com/denisenkom/go-mssqldb&#34; title=&#34;&#34;&gt;SqlServer&lt;/a&gt;。
使用者只需要提供DSN(data source name)或者tcp连接, open() db之后会返回一个*sql.DB对象。DB本身没有连接数据库，
只有当Query/Exec之后才会连接数据库。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>